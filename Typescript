// Denne klassen definerer kortklassen
class Card {
    public name: string;
    public suit: string;
    public value: number;

    constructor(suit: string, name: string, value: number) {
        this.name = name;
        this.suit = suit;
        this.value = value;
    }
}

// Her defineres kortstokken med 52 kort
class Deck {
    public cards: Card[];
    public suits: string[];
    public names: string[];
    public values: number[];

    constructor() {
        this.cards = [];
        this.suits = ['Hearts', 'Spades', 'Diamonds', 'Clubs'];
        this.names = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King'];
        this.values = [14, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
    }

    // Her blir kortstokken laget
    // Den første løkken vil iterere gjennom kortstokkens farger.
    // Den innebygde løkken vil iterere gjennom navnene og verdiene til kortene.
    // Dette vil legge til kortobjekter i den tomme kortstokken (cards array).
    public createDeck(): void {
        console.log('Creating a new Deck');
        for (let i = 0; i < this.suits.length; i++) {
            for (let n = 0; n < this.names.length; n++) {
                this.cards.push(new Card(this.suits[i], this.names[n], this.values[n]));
            }
        }
    }

    // Denne metoden vil stokke kortstokken
    // Denne for-løkken er satt til 52 iterasjoner fordi vi ønsker å stokke 52 kort
    // Dette vil ta det siste elementet i arrayet og multiplisere det med et tilfeldig tall
    // Dette vil sette variabelen randomItem til det spliced objektet basert på det tilfeldige tallet
    // Dette vil legge til det tilfeldige objektet fra oven i en ny tom array kalt
    public shuffleDeck(): Card[] {
        console.log('Shuffling Deck');
        const shuffledDeck: Card[] = [];
        for (let i = 0; i < 52; i++) {
            let randomPosition = Math.floor((this.cards.length - i) * Math.random());
            let randomItem = this.cards.splice(randomPosition, 1);
            shuffledDeck.push(...randomItem);
        }
        return shuffledDeck;
    }

    // Denne metoden vil dele ut kortene til spillerne
    // Dette legger til den første halvdelen av stokkede kort til spiller 1
    // Dette vil splicee de siste 26 kortene fra den stokkede stokken og tilordne til et array..
    // Dette legger til den siste halvdelen av de stokkede kortene til spiller 2
    public dealDeck(players: Players[], shuffleCards: Card[]): void {
        console.log('Dealing Cards');
        let dealingCards1 = shuffleCards.splice(0, 26);
        players[0].hands.push(...dealingCards1);
        let dealingCards2 = shuffleCards.splice(0, 26);
        players[1].hands.push(...dealingCards2);
    }
}

// Denne klassen lager delegerere
class Players {
    public name: string;
    public points: number;
    public hands: Card[];

    constructor(name: string) {
        this.name = name;
        this.points = 0;
        this.hands = [];
    }
}

class Game {
    public players: Players[];

    constructor() {
        this.players = [];
    }

    // Her starter spillet.
    public start(): void {

        // Spillere og navn gis
        this.players.push(new Players('Abbord'));
        this.players.push(new Players('Kveite'));
        console.log('Declare War!', this.players);

        // Skaper og stokker kortene
        let myDeck = new Deck();
        myDeck.createDeck();
        let shuffleDeck = myDeck.shuffleDeck();

        // Deler kortene
        myDeck.dealDeck(this.players, shuffleDeck);

        // Selve spillet, til en er tom for kort.
        this.playGame();
    }

    // Denne metoden vil spille spillet til det ikke er flere kort igjen.
    public playGame(): void {
        console.log('Erklærer Krig');
        let player1 = this.players[0];
        let player2 = this.players[1];
        
        while (player1.hands.length !== 0 && player2.hands.length !== 0) {
            let player1Card = player1.hands.pop();
            let player2Card = player2.hands.pop();
        
            if (!player1Card || !player2Card) {
                console.log('Error: One or both players ran out of cards.');
                break;
            }
    
            let roundWinner = '';
    
            if (player1Card.value > player2Card.value) {
                roundWinner = player1.name;
                player1.points += 1;
            } else if (player2Card.value > player1Card.value) {
                roundWinner = player2.name;
                player2.points += 1;
            }
    
            console.log(
                'Turn:', player1.name + ' vs ' + player2.name,
                '\nPlayer 1 card; ', player1Card.name, ' of ', player1Card.suit,
                '\nPlayer 2 card: ', player2Card.name, ' of ', player2Card.suit,
                '\nRound Winner: ', roundWinner,
                '\nPlayer 1 Points: ', player1.points,
                '\nPlayer 2 Points: ', player2.points,
                '\n-----------------------------'
            );
        }
    
        // Avslutter spillet og kunngjør vinneren
        this.endGame();
    }
    
    public endGame(): void {
        let gameWinner = '';
        let player1 = this.players[0];
        let player2 = this.players[1];
    
        // Sammenligner poengene for hver spiller og logger hvem som vant
        if (player1.points > player2.points) {
            gameWinner = player1.name;
            alert('Game Over! ' + gameWinner + ' won the game!\nFinal Scores;\n' +
                player1.name + ': ' + player1.points + '\n' +
                player2.name + ': ' + player2.points +
                '\nThanks for playing'
            );
        } else if (player2.points > player1.points) {
            gameWinner = player2.name;
            alert('Game Over! ' + gameWinner + ' won the game!\nFinal Scores;\n' +
                player1.name + ': ' + player1.points + '\n' +
                player2.name + ': ' + player2.points +
                '\nThanks for playing'
            );
        } else {
            alert('Game Over!\nTied Game\nFinal Scores;\n' +
                player1.name + ': ' + player1.points + '\n' +
                player2.name + ': ' + player2.points +
                '\nThanks for playing!'
            );
        }
    } // This was missing
    
    }
    
    let game = new Game();
    game.start();
